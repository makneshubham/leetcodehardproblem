We define the findMedianSortedArrays method, which takes two sorted arrays nums1 and nums2 as input and returns the median value.

We initialize variables m and n to store the lengths of nums1 and nums2, respectively. We also create a new array called merged with a length equal to the sum of the lengths of nums1 and nums2. This array will hold the merged sorted elements.

We define three pointers: i for nums1, j for nums2, and k for merged. These pointers will keep track of the current positions while merging the arrays.

We enter a while loop that merges the two sorted arrays into the merged array. The loop continues until we reach the end of either nums1 or nums2.

Inside the loop, we compare the current elements pointed by nums1[i] and nums2[j]. If nums1[i] is less than or equal to nums2[j], we assign nums1[i] to merged[k] and increment i and k. Otherwise, we assign nums2[j] to merged[k] and increment j and k. This ensures that we merge the elements in ascending order.

After merging all the common elements, we check if there are any remaining elements in nums1 or nums2 that were not merged. If so, we add them to the merged array.

Once the merging process is complete, we calculate the index of the median element in the merged array. For an array of odd length, the median is simply the middle element. For an array of even length, we need to take the average of the two middle elements.

Finally, we return the median value.

In the main method, we initialize nums1 as [1, 3] and nums2 as [2, 4]. We then call the findMedianSortedArrays method with these input arrays and store the result in the median variable.

Finally, we print the value of the median variable, which represents the median of the two sorted arrays.

The code essentially merges the two sorted arrays into a single sorted array and then calculates the median based on the merged array.


   The code 
       class Solution {
     public  double mid(int arr[] , int arr1[]){
        int n = arr.length;
        int m = arr1.length;
        int marj[] = new int[m+n];
        int i = 0;
        int j=0;
        int k=0;

          while (i<n && j<m) {
            if (arr[i]<arr1[j]) {
                 marj[k] = arr[i];
                 i++;
            }
            else {
                marj[k] = arr1[j];
                j++;
            }
            k++;
          }
          while (i<n) {
              marj[k] = arr[i];
              i++;
              k++;
          }
          while (j<m) {
            marj[k] = arr1[j];
            j++;
            k++;
          }
          int mid = (n+m - 1)/2;

          if ((m+n)%2==0) {
            return (marj[mid]+marj[mid+1])/2.0;
          }
          return marj[mid];
     }
    public  double findMedianSortedArrays(int[] nums1, int[] nums2) {
        return  mid(nums1,nums2);
    }
}
